/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query RgbppCoinTransactionsByTypeHash($typeHash: String!, $page: Int!, $pageSize: Int!) {\n    rgbppCoin(typeHash: $typeHash) {\n      transactionsCount\n      transactions(page: $page, pageSize: $pageSize) {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          inputs {\n            txHash\n            index\n            capacity\n            status {\n              consumed\n              txHash\n              index\n            }\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n          outputs {\n            txHash\n            index\n            capacity\n            status {\n              consumed\n              txHash\n              index\n            }\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n        }\n      }\n    }\n  }\n": types.RgbppCoinTransactionsByTypeHashDocument,
    "\n  query RgbppLatestTransactions($limit: Int!) {\n    rgbppLatestTransactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          hash\n          blockNumber\n          confirmations\n          confirmed\n          fee\n          feeRate\n          isCellbase\n          size\n          inputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n": types.RgbppLatestTransactionsDocument,
    "\n        query RgbppStatistic {\n          rgbppStatistic {\n            l1HoldersCount: holdersCount(layer: L1)\n            l2HoldersCount: holdersCount(layer: L2)\n            latest24HoursL2TransactionsCount\n            latest24HoursL1TransactionsCountLeapIn: latest24HoursL1TransactionsCount(leapDirection: LeapIn)\n            latest24HoursL1TransactionsCountLeapOutput: latest24HoursL1TransactionsCount(leapDirection: LeapOut)\n            latest24HoursL1TransactionsCountLeapWithin: latest24HoursL1TransactionsCount(leapDirection: Within)\n          }\n        }\n      ": types.RgbppStatisticDocument,
    "\n  query BtcAndCkbChainInfo {\n    ckbChainInfo {\n      tipBlockNumber\n    }\n    btcChainInfo {\n      tipBlockHeight\n      transactionsCountIn24Hours\n    }\n  }\n": types.BtcAndCkbChainInfoDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RgbppCoinTransactionsByTypeHash($typeHash: String!, $page: Int!, $pageSize: Int!) {\n    rgbppCoin(typeHash: $typeHash) {\n      transactionsCount\n      transactions(page: $page, pageSize: $pageSize) {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          inputs {\n            txHash\n            index\n            capacity\n            status {\n              consumed\n              txHash\n              index\n            }\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n          outputs {\n            txHash\n            index\n            capacity\n            status {\n              consumed\n              txHash\n              index\n            }\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query RgbppCoinTransactionsByTypeHash($typeHash: String!, $page: Int!, $pageSize: Int!) {\n    rgbppCoin(typeHash: $typeHash) {\n      transactionsCount\n      transactions(page: $page, pageSize: $pageSize) {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          inputs {\n            txHash\n            index\n            capacity\n            status {\n              consumed\n              txHash\n              index\n            }\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n          outputs {\n            txHash\n            index\n            capacity\n            status {\n              consumed\n              txHash\n              index\n            }\n            type {\n              codeHash\n              hashType\n              args\n            }\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n              typeHash\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RgbppLatestTransactions($limit: Int!) {\n    rgbppLatestTransactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          hash\n          blockNumber\n          confirmations\n          confirmed\n          fee\n          feeRate\n          isCellbase\n          size\n          inputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n"): (typeof documents)["\n  query RgbppLatestTransactions($limit: Int!) {\n    rgbppLatestTransactions(limit: $limit) {\n      txs {\n        ckbTxHash\n        btcTxid\n        leapDirection\n        blockNumber\n        timestamp\n        ckbTransaction {\n          hash\n          blockNumber\n          confirmations\n          confirmed\n          fee\n          feeRate\n          isCellbase\n          size\n          inputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n          outputs {\n            txHash\n            index\n            capacity\n            cellType\n            lock {\n              codeHash\n              hashType\n              args\n            }\n            xudtInfo {\n              symbol\n              amount\n              decimal\n            }\n            status {\n              consumed\n              txHash\n              index\n            }\n          }\n        }\n      }\n      total\n      pageSize\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n        query RgbppStatistic {\n          rgbppStatistic {\n            l1HoldersCount: holdersCount(layer: L1)\n            l2HoldersCount: holdersCount(layer: L2)\n            latest24HoursL2TransactionsCount\n            latest24HoursL1TransactionsCountLeapIn: latest24HoursL1TransactionsCount(leapDirection: LeapIn)\n            latest24HoursL1TransactionsCountLeapOutput: latest24HoursL1TransactionsCount(leapDirection: LeapOut)\n            latest24HoursL1TransactionsCountLeapWithin: latest24HoursL1TransactionsCount(leapDirection: Within)\n          }\n        }\n      "): (typeof documents)["\n        query RgbppStatistic {\n          rgbppStatistic {\n            l1HoldersCount: holdersCount(layer: L1)\n            l2HoldersCount: holdersCount(layer: L2)\n            latest24HoursL2TransactionsCount\n            latest24HoursL1TransactionsCountLeapIn: latest24HoursL1TransactionsCount(leapDirection: LeapIn)\n            latest24HoursL1TransactionsCountLeapOutput: latest24HoursL1TransactionsCount(leapDirection: LeapOut)\n            latest24HoursL1TransactionsCountLeapWithin: latest24HoursL1TransactionsCount(leapDirection: Within)\n          }\n        }\n      "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BtcAndCkbChainInfo {\n    ckbChainInfo {\n      tipBlockNumber\n    }\n    btcChainInfo {\n      tipBlockHeight\n      transactionsCountIn24Hours\n    }\n  }\n"): (typeof documents)["\n  query BtcAndCkbChainInfo {\n    ckbChainInfo {\n      tipBlockNumber\n    }\n    btcChainInfo {\n      tipBlockHeight\n      transactionsCountIn24Hours\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;